[["index.html", "现代精算统计模型 👨🏫 欢迎 🗓️ 课程安排 🤔 答疑", " 现代精算统计模型 Modern Actuarial Models 2020-11-13 22:56:59 👨🏫 欢迎 《现代精算统计模型》主要讲述如何使用统计学习和机器学习算法，提升传统的精算统计模型或者解决新的精算问题。这门课主要参考瑞士精算师协会发布的“精算数据科学”，该教程的主要目的是“为精算师提供一个对数据科学全面且易懂的介绍”，该教程提供了多篇方法性文章并开源代码，这样“读者可以相对容易地把这些数据科学方法用在自己的数据上”。 我们强烈建议大家仔细阅读以下文献，尝试并理解所有代码。此网站将作为该课程的辅助，为大家答疑，总结文献，并对文献中的方法做扩展。该网站由授课老师高光远和助教张玮钰管理，欢迎大家反馈意见到助教、微信群、或邮箱 guangyuan.gao@ruc.edu.cn。 🗓️ 课程安排 以下安排为初步计划，根据大家的需求和背景，我们可能要花更多的时间在某些重要的方法及其在精算上的应用。 第9-10周: 1 - French Motor Third-Party Liability Claims https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3164764 第11周: 2 - Inisghts from Inside Neural Networks https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3226852 3 - Nesting Classical Actuarial Models into Neural Networks https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3320525 第12周： 4 - On Boosting: Theory and Applications https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3402687 第13周： 5 - Unsupervised Learning: What is a Sports Car https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3439358 第14周： 6 - Lee and Carter go Machine Learning: Recurrent Neural Networks https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3441030 第15-16周： 7 - The Art of Natural Language Processing: Classical, Modern and Contemporary Approaches to Text Document Classification https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3547887 第17周： 8 - Peeking into the Black Box: An Actuarial Case Study for Interpretable Machine Learning https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3595944 第18周： 9 - Convolutional neural network case studies: (1) Anomalies in Mortality Rates (2) Image Recognition https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3656210 🤔 答疑 我定期把同学们的普遍疑问在这里解答，欢迎提问！ 👉 CASdatasets (2020/11/13) 源文件在http://cas.uqam.ca/，但下载速度很慢，我把它放在坚果云共享。下载后选择install from local archive file。 👉 微信群 (2020/11/08) "],["ch1.html", "Chapter 1 准备工作 1.1 克隆代码 1.2 建立环境", " Chapter 1 准备工作 1.1 克隆代码 GitHub提供了大量开源代码，这门课的代码主要来自此链接。通常，使用GitHub开源代码最方便的是fork到自己GitHub账户下，然后clone到本地。具体而言，需要进行以下操作： 注册GitHub账户。 Fork此链接到自己账户下的新仓库,可重新命名为如Modern-Actuarial-Models或其他名称。 安装git。在命令窗口使用$ git config --global user.name \"Your Name\" 和 $ git config --global user.email \"youremail@yourdomain.com\" 配置git的用户名和邮箱分别为GitHub账户的用户名和邮箱。最后可使用$ git config --list查看配置信息。 (选做)在本地电脑创建ssh public key，并拷贝到GitHub中Setting下SSH and GPG keys。ssh public key一般保存在本人目录下的隐藏文件夹.ssh中，扩展名为.pub。详见链接。设立SSH可以避免后续push代码到云端时，每次都需要输入密码的麻烦 电脑连接手机4G热点。一般地，在手机4G网络下克隆的速度比较快。 在RStudio中创建新的项目，选择Version Control，然后Git，在Repository URL中输入你的GitHub中刚才fork的新仓库地址（在Code下能找到克隆地址，如果第4步完成可以选择SSH地址，如果第4步没完成必须选择HTTPS地址），输入文件夹名称，选择存放位置，点击create project，RStudio开始克隆GitHub上该仓库的所有内容。 此时，你在GitHub上仓库的内容全部克隆到了本地，且放在了一个R Project中。在该Project中，会多两个文件，.Rproj和.gitignore，第一个文件保存了Project的设置，第二文件告诉git在push本地文件到GitHub时哪些文件被忽略。 如果你修改了本地文件，可以通过R中内嵌的Git上传到GitHub（先commit再push），这样方便在不同电脑上同步文件。git是代码版本控制工具，在push之前，你可以比较和上个代码版本的差异。GitHub记录了你每次push的详细信息，且存放在本地文件夹.git中。同时，如果GitHub上代码有变化，你可以pull到本地。如果经常在不同电脑上使用本仓库，一般需要先pull成最新版本，然后再编辑修改，最后commit-push到GitHub。 (选做) 你可以建立新的branch，使自己的修改和源代码分开。具体操作可参考链接，或者参考账户建立时自动产生的getting-started仓库。 (选做) 你可以尝试Github Desktop或者Jupyter Lab（加载git extension）管理，但对于这门课，这两种方式不是最优。 理论上，GitHub上所有仓库都可以采用以上方法在RStudio中管理，当然，RStudio对于R代码仓库管理最有效，因为我们可以直接在RStudio中运行仓库中的代码。 1.2 建立环境 首先下载并安装Anaconda或者Miniconda。 以下步骤中，当你发现安装非常慢时，可以尝试4G网络，尝试VPN，尝试改变CRAN的镜像源，或尝试改变conda的镜像源。conda镜像源通过修改用户目录下的.condarc文件使用TUNA镜像源。 1.2.1 R interface to Keras 这里主要说明keras包的安装和使用。Keras是tensorflow的API，在keras中建立的神经网络模型都由tensorflow训练。安装keras包主要是安装python库tensorflow，并让R与之相关联。 1.2.1.1 R自带安装方式 最简单的安装方式如下： 使用install.packages(\"tensorflow\")安装所有相关的包，然后library(\"tensorflow\")。 install_tensorflow() 这时大概率会出现 No non-system installation of Python could be found. Would you like to download and install Miniconda? Miniconda is an open source environment management system for Python. See https://docs.conda.io/en/latest/miniconda.html for more details. Would you like to install Miniconda? [Y/n]: 虽然你可能已经有Anaconda和python，但R没有“智能”地识别出来，这时仍建议你点Y，让R自己装一下自己能更好识别的Minicon da, 这个命令还会自动建立一个独立conda环境r-reticulate，并在其中装好tensorflow, keras等。 上步如果正常运行，结束后会自动重启R。这时你运行library(tensorflow)然后tf$constant(\"Hellow Tensorflow\")，如果没报错，那继续install_packages(\"keras\"),library(\"keras\")。 用以下代码验证安装成功 model &lt;- keras_model_sequential() %&gt;% layer_flatten(input_shape = c(28, 28)) %&gt;% layer_dense(units = 128, activation = &quot;relu&quot;) %&gt;% layer_dropout(0.2) %&gt;% layer_dense(10, activation = &quot;softmax&quot;) summary(model) 如果出现以下错误 错误: Installation of TensorFlow not found. Python environments searched for &#39;tensorflow&#39; package: C:\\Users\\Guangyuan\\AppData\\Local\\r-miniconda\\envs\\r-reticulate\\python.exe You can install TensorFlow using the install_tensorflow() function. 抱歉！我暂时没找到解决办法。。。但我们可以在conda下安装好tensorflow然后关联到R。这时，你先把之前失败的安装C:\\Users\\Guangyuan\\AppData\\Local\\r-miniconda，这个文件夹完全删掉。然后参考以下安装步骤。 1.2.1.2 使用reticulate关联conda环境 运行Anaconda Prompt或者Anaconda Powershell Prompt，在命令行输入conda create -n r-tensorflow tensorflow，conda会创建一个独立的r-tensorflow环境，并在其中安装tensorflow包。 继续在命令行运行conda activate r-tensorflow加载刚刚安装的环境，并pip install h5py pyyaml requests Pillow scipy在该环境下安装keras依赖的包。至此，R需要的tensorflow环境已经准备好，接下来让R关联此环境。 重启R，library(\"reticulate\")然后use_condaenv(\"r-tensorflow\",required=T),这时R就和上面建立的环境关联好。 library(\"keras“)。这里假设你已经装好tensorflow和keras包。 用以下代码验证安装成功 model &lt;- keras_model_sequential() %&gt;% layer_flatten(input_shape = c(28, 28)) %&gt;% layer_dense(units = 128, activation = &quot;relu&quot;) %&gt;% layer_dropout(0.2) %&gt;% layer_dense(10, activation = &quot;softmax&quot;) summary(model) 1.2.2 R interface to python (了解) R包reticulate为tensorflow的依赖包，当你装tensorflow它也被自动安装。它可以建立R与python的交互。常见的命令如下： conda_list()列出已安装的conda环境 virtualenv_list()列出已存在的虚拟环境 use_python, use_conda, use_virtualenv可以指定与R关联的python。 py_config()可以查看当前python关联信息。 很多时候，R会创建一个独立conda环境r-miniconda/envs/r-reticulate。 1.2.3 Python (了解) python环境建立比较简单，在使用reticulate关联conda环境我们已经建立过一个环境r-tensorflow。具体操作如下: 建立独立环境conda create env -n env-name python=3.8 tensorflow notebook。该命令会建立env-name的环境，并在其中安装python=3.8,tensorflow，notebook包及其依赖包。 激活环境conda activate env-name. cd 到你的工作目录。 启动jupyter notebook jupyter notebook。 如遇到缺少的包，在该环境env-name下使用conda install ***安装缺少的包。 "]]
